/**
 * 1. Khai b√°o bi·∫øn
 * ES5: var , const
 * ES6: let, const
 */

const PI = 3.14;
// kh√¥ng ƒë·∫∑t t√™n tr√πng
// const PI = 35214;
//Kh√¥ng g√°n l·∫°i
// PI = 3.141414;
// console.log(PI);

var age = 18;
//cho ph√©p tr√πng (nh∆∞·ª£c ƒëi·ªÉm)
// var age = 20;
//cho ph√©p g√°n l·∫°i gi√° tr·ªã
// age = 21;
console.log(age);

let newAge = 30;
// kh√¥ng cho ph√©p ƒë·∫∑t tr√πng t√™n
// let newAge = 40;
//cho ph√©p g√°n l·∫°i gi√° tr·ªã
newAge = 50;
console.log(newAge);

/**Scope variable** */
// global & local

//Global :bi·∫øn to√†n c·ª•c (bien khai b√°o ngo√†i h√†m), d√πng b·∫•t k·ª≥ n∆°i trong web
var ten = "B√© Heo";

//ES5
//function scope (local)
function tinhCanNang() {
    var weight = 100;
    console.log(ten);
    console.log("trong h√†m: " + weight);
    if (weight >= 100) {
        var tuoi = 20;
        console.log("C√¢n nƒÉng: " + weight + ".B·∫°n h∆°i th·ª´a c√¢n 1 t√≠. N√™n ƒÉn u·ªëng ƒë·ªÅu ƒë·ªô h∆°n.");
    }

    console.log("Tu·ªïi c·ªßa b·∫°n: " + tuoi);
}

tinhCanNang();
//Sai ph·∫°m vi
// console.log("ng√≤ai h√†m" + weight);

//ES6: Block Scope
function tinhCanNang2() {
    console.log("Th√¥ng b√°o h√†m c√¢n n·∫∑ng 2");
    let weight = 100;
    console.log(ten);
    console.log("trong h√†m: " + weight);
    if (weight >= 100) {
        //block scope
        //n·∫øu let khai b√°o trong if, loop th√¨ ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng trong l·∫πnh if ho·∫∑c loop
        let tuoi = 20;
        console.log("C√¢n nƒÉng: " + weight + ".B·∫°n h∆°i th·ª´a c√¢n 1 t√≠. N√™n ƒÉn u·ªëng ƒë·ªÅu ƒë·ªô h∆°n.");
        console.log("Tu·ªïi c·ªßa b·∫°n: " + tuoi);
    }

    // console.log("Tu·ªïi c·ªßa b·∫°n: " + tuoi);
}
tinhCanNang2();

/*********Hoisting******** */
//Tr√¨nh duy·ªát s·∫Ω t·ª± di chuy·ªÉn d√≤ng khai bi·∫øn (var city) l·ªánh v·ªã tr√≠ ƒë·∫ßu file code
// C√≤n d√≤ng g√°n gi√° tr·ªã v·∫´n ·ªü v·ªã tr√≠ code c≈© (city = "Hoc CHi Minh")

//ES5

//C1:
//B·ªã ·∫£nh h∆∞·ªüng Hoisting
//console.log(city); // undefined
// var city = "Hoc CHi Minh";

//C2
// var city;
// console.log(city);// undefined
// city = "Hoc CHi Minh";

// Do ·∫£nh h∆∞·ªüng c·ªßa hoisting n√™n d√≤ng khai b√°o h√†m s·∫Ω di chuy·ªÉn l√™n ƒë·∫ßu file
// => gi√∫p g·ªçi h√†m ·ªü b·∫•t k·ª≥ v·ªã tr√≠ n√†o c≈©ng ƒë∆∞·ª£c
// => Kh√≥ qu·∫£n l√Ω code

// hienThanhPho();
// function hienThanhPho(){
//     console.log(city);
// }
// hienThanhPho();

//ES6: lo·∫°i b·ªè Hoisting
// console.log(city);// th√¥ng b√°o r√µ l√Ω do l·ªói (bi·∫øn ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o)
let city = "Ha Noi";

let city2;
// console.log(city2);//Undefined (l·ªói khi kh√¥ng g√°n gi√° tr·ªã)
city2 = "Ha Noi"

/**
 * 2. Arrow function
 */
//2 c√°ch khai b√°o h√†m c·ªßa ES5
//C1: declarations (khai b·∫±ng t·ª´ kh√≥a function)
let fullName = "Nguy·ªÖn Th·ªã C√¥ng D√¢n";

function hello() {
    console.log("Ng∆∞·ªùi ti·∫øp theo" + fullName);
}
hello();
// C2: Expessions
let newHello = function () {
    console.log("newHello")
    console.log("Ng∆∞·ªùi ti·∫øp theo" + fullName);
}
newHello();

// ES6
let newHello2 = () => {
    console.log("newHello2")
    console.log("Ng∆∞·ªùi ti·∫øp theo" + fullName);
}
newHello2();

//Truy·ªÅn tham s·ªë
let newHello3 = (name) => {
    console.log("newHello3")
    console.log("Ng∆∞·ªùi ti·∫øp theo" + name);
}
newHello3("TR·∫ßn B·∫¢o V·ªá");

//R√∫t g·ªçn 1:N·∫øu ch·ªâ c√≥ 1 tham s·ªë th√¨ c√≥ th·ªÉ b·ªè d√¢u ()
let newHello4 = name => {
    console.log("newHello4")
    console.log("Ng∆∞·ªùi ti·∫øp theo" + name);
}
newHello4("TR·∫ßn Th·ªã Lao C√¥ng");

//R√∫t g·ªçn 2: N·∫øu ch·ªâ c√≥ 1 l·ªánh return th√¨ b·ªè dau {} v√† l·ªánh "return"
// let newHello5 = name =>{    
//    return "Ng∆∞·ªùi ti·∫øp theo"+ name;
// }

let newHello5 = name => "Ng∆∞·ªùi ti·∫øp theo" + name;
console.log(newHello5("Nguy·ªÖn Th·ªã Gi√°o Vi√™n"));

/**L·ªói c√∫ ph√°p** */

// let newHello6 = ()=>
// {    
//     console.log("Ng∆∞·ªùi ti·∫øp theo"+ fullName);
// }
// newHello6();

//K√Ω hi·ªáu "=>" ph·∫£i n·∫±m chung d√≤ng v·ªõi khai b√°o h√†m
// let newHello6 = ()
// =>
// {    
//     console.log("Ng∆∞·ªùi ti·∫øp theo"+ fullName);
// }
// newHello6();

/*****Ng·ªØ c·∫£nh(context) c·ªßa con tr·ªè this******** */
let hocVien = {
    ten: "Nguy·ªÖn Th·ªã H·ªçc Vi√™n",
    lop: "BC07",
    layThongTin: function () {
        //this ƒë·∫°i di·ªán cho function ƒëang ch·ª©a n√≥
        //layThongTin ƒë∆∞·ª£c tham chi·∫øu t·ª´ ƒë·ªëi t∆∞·ª£ng hocVien
        // => this l√† ƒë·ªëi t∆∞·ª£ng hocVien
        console.log("T√™n h·ªçc vi√™n: " + this.ten);
        console.log("L·ªõp: " + this.lop);
    }
}
hocVien.layThongTin();

let hocVien2 = {
    ten: "Nguy·ªÖn Th·ªã H·ªçc Vi√™n",
    lop: "BC07",
    danhSachDiem: [9, 7, 8],
    layThongTin: function () {
        // this.danhSachDiem => hocVien2
        // closure function: function ƒë∆∞·ª£c kh·ªüi t·∫°o trong function kh√°c
        this.danhSachDiem.map(function (diem) {
            //This l√†  function(diem) (thu·ªôc window)
            console.log("T√™n h·ªçc vi√™n: " + this.ten + ".L·ªõp: " + this.lop + ".C√≥ ƒëi·ªÉm: " + diem);
        });
    }
}
hocVien2.layThongTin();

//S·ª≠a b·∫±ng c√°ch c·ªßa ES5
// C1: t·∫°o bi·∫øn t·∫°m _bind
//C2: d√πng h√†m bind()
let hocVien3 = {
    ten: "Nguy·ªÖn Th·ªã H·ªçc Vi√™n",
    lop: "BC07",
    danhSachDiem: [9, 7, 8],
    layThongTin: function () {
        // C1
        // let _bind = this;

        // this.danhSachDiem.map(function(diem){

        //     console.log("T√™n h·ªçc vi√™n: "+_bind.ten + ".L·ªõp: "+_bind.lop + ".C√≥ ƒëi·ªÉm: "+ diem);            
        // });    

        // C2      
        this.danhSachDiem.map(function (diem) {
            console.log("T√™n h·ªçc vi√™n: " + this.ten + ".L·ªõp: " + this.lop + ".C√≥ ƒëi·ªÉm: " + diem);
        }.bind(this));

    }
}
hocVien3.layThongTin();

//S·ª≠a b·∫±ng ES6
let hocVien4 = {
    ten: "Nguy·ªÖn Th·ªã H·ªçc Vi√™n",
    lop: "BC07",
    danhSachDiem: [9, 7, 8],
    //Ph∆∞∆°ng th·ª©c
    //arrow function kh√¥ng d√πng cho ph∆∞∆°ng th·ª©c
    layThongTin: function () {
        //arrow function kh√¥ng c√≥ ng·ªØ c·∫£nh, n√™n kh√¥ng thay ƒë·ªïi this
        this.danhSachDiem.map((diem) => {
            console.log("T√™n h·ªçc vi√™n 4: " + this.ten + ".L·ªõp: " + this.lop + ".C√≥ ƒëi·ªÉm: " + diem);
        });
    }
}
hocVien4.layThongTin();

/**
 * 3. Default parameter
 */

let hienThongTin = (fullName = "H·ªçc Vi√™n", age = 18) => {
    console.log("T√™n: " + fullName + "\n Tu·ªïi: " + age);
}

hienThongTin();
hienThongTin("H·ªçc Vi√™n 2", 20);

/**
 * 4. Rest Para
 * Chuy·ªÉn t·ª´ng gi√° tr·ªã th√†nh m·∫£ng
 * D√πng trong tr∆∞·ªùng h·ª£p kh√¥ng bi·∫øt ch√≠nh x√°c s·ªë l∆∞·ª£ng tham s·ªë
 */

let theZoo = (...animals) => {
    animals.map((aminal) => {
        console.log(aminal);
    });
}
theZoo('üê±', 'üêº', 'üêí');

/**
 * 5. Speard Para
 * Ng∆∞·ª£c v·ªõi Rest, chuy·ªÉn m·∫£ng th√†nh t·ª´ng ph·∫ßn t·ª≠
 * 
 */

/**
 * Tham tr·ªã (Truy·ªÅn gi√° tr·ªã)
 * number
 * string
 * boolean
 * 
 * Tham chi·∫øu: (Truy·ªÅn ƒë·ªãa ch·ªâ c·ªßa √¥ nh·ªõ)
 * M·∫£ng
 * Object
 * Function
 */
// let khoHCM = ["Iphone","SamSung","Xiaomi"];
// let khoHN = khoHCM;

// khoHN.push("VSmart");


let khoHCM = ["Iphone", "SamSung", "Xiaomi"];
//...khoHCM: l·∫•y t·ª´ng ph·∫ßn t·ª≠ c·ªßa khoHCM v√† push v√†o khoHN
let khoHN = [...khoHCM];
khoHN.push("VSmart");

console.log("HCM");
console.table(khoHCM);

console.log("HN");
console.table(khoHN);

let hv1 = {
    fullname: "hv",
    age: 18
}
// let hv2 = {
//     fullname:"hv",
//     age:18,
//     gender:"M"
// }
let hv2 = {
    ...hv1,
    gender: "M"
}
console.log(hv1);
console.log(hv2);

/**
 * 6. Destructuring
 * Truy xu·∫•t thu·ªôc t√≠nh
 */

let pet = {
    nickName:"Ho√†ng Th∆∞·ª£ng",
    age1: 1
}

// let nickName = pet.nickName;
// console.log(nickName);

let {nickName,age1} = pet;
console.log(nickName,age1);

let {nickName: n,age1: a} = pet;
console.log(n,a);

/**
 * Object Literal
 * T√πy ch·ªânh t√™n thu·ªôc t√≠nh
 */
let nickName2 = "B√© Na"
// let pet2 = {
//     nickName2:nickName2
// }
//N·∫øu t√™n thu·ªôc t√≠nh tr√πng t√™n tham s·ªë th√¨ kh√¥ng c·∫ßn khai b√°o g√°n gi√° tr·ªã
let pet2 = {
    nickName2
}
let {nickName2: n2} = pet2;
console.log(n2);

//T√πy ch·ªânh t√™n thu·ªôc t√≠nh
let tenThuocTinh = "fullname";
let pet3 = {
    [tenThuocTinh]:"pet 3"
}
let {fullname: full} = pet3;
console.log(full);

/**
 * For in, For of
 */

let phone = ["Iphone", "SamSung", "Xiaomi"];

// for(let i =0; i < phone.length; i++){

// }

for (let index in phone){
    //duy·ªát theo index
    console.log(phone[index]);
}

for (let value of phone){
    //duy·ªát theo gi√° tr·ªã
    console.log(value);
}

let dsPhone = phone.forEach((value,index)=>{
    //Kh√¥ng return ƒë∆∞·ª£c m·∫£ng
    return value;
});

console.log(dsPhone);

let dsPhone2 = phone.map((value,index)=>{
    //return ƒë∆∞·ª£c m·∫£ng
    //l·ªánh return kh√¥ng c√≥ t√°c d·ª•ng d·ª´ng h√†m
    return value;
});

console.log(dsPhone2);

